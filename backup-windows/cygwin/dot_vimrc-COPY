" Vim
" An example for a vimrc file.
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"             for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc

if &term == 'xterm-256color'
	set t_Co=256
elseif &term == 'rxvt-unicode'	
	set t_Co=256
else
	set t_Co=16
endif

if &t_Co == 256
	colorscheme moria
else
	let g:CSApprox_loaded = 1
	colorscheme peaksea
endif	

" Option specific for gvim
if has("gui_running")
    set gfn=Consolas\ 11   " default font
    set lsp=1              " number of pixels between line
	set guioptions-=T      " disable toolbard
	set guioptions-=r      " disable scrollbar
	set lines=60           " window height
	set columns=120        " window width
endif

set ignorecase
set textwidth=80
set autoindent
set shiftwidth=4
set shiftround
set formatoptions=tcq2
set tabstop=4
" expandtab is commented out below as we want to set it only on specific
" FileType via SetCodingStyle()
" set expandtab
set nohlsearch
set ruler
set nolist
syntax on
syn sync fromstart
let perl_fold=1
let perl_want_scope_in_variables=1
let perl_extended_vars=1
let perl_include_pod=1

" Workaround for Cygwin
let g:netrw_cygwin=1
let g:netrw_scp_cmd="/usr/bin/scp"
let g:netrw_liststyle=3
let g:netrw_browse_split=4
set t_ti= t_te=

" NERD_Tree config
let NERDTreeWinPos="right"
let NERDTreeWinSize=35


" minibufexplorer setting
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1 

" Thesaurus
" set thesaurus+=/home/et6339/.vim/thesaurus/mthesaur.txt

" Auto-correct word
" :source ~/.vim/autocorrect/autocorrect.vim

" Use Vim defaults (much better!)
set nocompatible 

" allow backspacing over everything in insert mode
set bs=2		 

" always set autoindenting on
set ai           

" Status bar
set laststatus=2

" read/write a .viminfo file, don't store more than 50 lines of registers
set viminfo='20,\"50	

" Setting for Project 
:let g:proj_flags="imstvcg"

" Backup files and try local .backup directory before $HOME; original file
" will be named with an extension of .backup
set backup 
set backupext=.backup

" Set tab and EOL chacter and display tem...
set listchars=tab:>.,trail:x

" show currently type command?
set showcmd

" show matching parens?
set showmatch

" show current mode?
set showmode

" keep the swap file here.
if has("win32") || has("win64")
    set directory=$TMP
else
    set directory=/tmp
end 

" Retain visual block after indenting
:vnoremap > >gv
:vnoremap < <gv

" ABBREVIATIONS
:ab Yruler #234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
iab Ydate   <C-R>=strftime("%Y%m%d")<CR>
iab Ydated  <C-R>=strftime("%Y-%m-%d")<CR>
iab Ydatel  <C-R>=strftime("%a %b %d %T %Z %Y")<CR>
iab Ydatetime   <C-R>=strftime("%Y%m%d %T")<CR>
iab Ytime   <C-R>=strftime("%H:%M")<CR>
iab Yfilepath   <C-R>=getcwd()."/".bufname(1)<CR>
iab Ysu sub {<CR>    my () = @_;<CR>}<CR><ESC>3k <ESC>l <ESC>i
iab Ype #!/usr/bin/perl<ESC>o<CR>use strict;<CR>use warnings;<CR><CR><ESC>j
iab Ymo package MyOwnPackage;<ESC>o<CR>use Moose; # turn on strict/warnings<CR><CR><ESC>j

" mapping for comment and un-comment
map C 0i# <ESC>j
map T 0xx<ESC>j

map ,t   :call Notab()<cr>
map ,c   :!perl -c %
map ,1   :call ToggleBackground()<cr>
map ,2   :call ToggleHLSearch()<cr>
map <F1> :call Syntax_toggle()<cr>
map <F2> :call AI_toggle()<cr>
map <F5> !}par<cr>}
map <F6> {!}par<cr>}
map <F7> !par<cr>
map <F8> !Gpar<cr>
map <F10> :NERDTreeToggle<CR>


" Added dash underline by CTRL-H
nnoremap <Leader>H yyp^v$r-o<Esc>

" Added closing bracket
imap {} {<CR>}<Esc>O
" :imap ( ()<Left>
" :imap [ []<Left>

" toggle the hlsearch thing for when you can't find your cursor
:function ToggleHLSearch()
:  if (&hlsearch)
:    set nohlsearch
:    return ''
:  else
:    set hlsearch
:    return ''
:  endif
:endfunction


" toggle the syntax coloring
:function ToggleBackground()
:  if (&background=="dark")
:    set background=light
:    return ''
:  else
:    set background=dark
:    return ''
:  endif
:endfunction


:function Syntax_toggle()
:  if has("syntax_items")
:    syntax off
:  else
:    syntax on
:    syn sync fromstart
:    set background=dark
:    hi Comment term=bold ctermfg=DarkCyan
:  endif
:endfunction

let b:ai_flag = 1
:function AI_toggle() 
:  if b:ai_flag
:    set noautoindent
:    set textwidth=0
:    let b:ai_flag = 0
:  else
:    set autoindent
:    set textwidth=72
:    let b:ai_flag = 1
:  endif
:endfunction 

" function to set coding style 
:function SetCodingStyle()
:  set tabstop=4
:  set expandtab
:endfunction

" HTML file
:function SetHtmlStyle()
:  set tabstop=4
:  set expandtab
:  set textwidth=0
:endfunction

autocmd FileType sh call SetCodingStyle()
autocmd FileType perl call SetCodingStyle()
au FileType perl,sh,php set cin cinkeys=0{,0},:,!^F,o,O,e comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
autocmd FileType html call SetHtmlStyle()
autocmd FileType chtml call SetHtmlStyle()
autocmd FileType schtml call SetHtmlStyle()
autocmd FileType js call SetCodingStyle()
autocmd FileType css call SetCodingStyle()
autocmd BufRead todo.html set ts=8 tw=64
autocmd BufRead /tmp/cvs set ts=8 et tw=64

" .(s)chtml file 
autocmd BufNewFile,BufRead *.inc setf html
autocmd BufNewFile,BufRead *.chtml setf html
autocmd BufNewFile,BufRead *.schtml setf html

:function Notab()
:set ts=4 expandtab
:%retab!
:endfunction

autocmd BufReadPost /tmp/crd.diff :map <F1> :call Notab()

" In text files, always limit the width of text to 78 characters
autocmd BufRead *.txt set tw=64	

" In email files, always limit the width of text to 64 characters
autocmd BufRead mutt-* set tw=64

autocmd BufRead *.frm set expandtab ts=8

autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
"if &t_Co > 2 || has("gui_running")
"  syntax on
"  set hlsearch
"endif

:augroup gpg
augroup gpg
  au!

" Enable editing of gpg files
"	  read:	set binary mode before reading the file
"		decypher text in buffer after reading
"	 write:	cypher file after writing
"	append:	decypher file, append, cypher file
autocmd BufReadPre,FileReadPre	*.gpg set bin
autocmd BufReadPost,FileReadPost	*.gpg let ch_save = &ch|set ch=2
autocmd BufReadPost,FileReadPost	*.gpg '[,']!gpg --no-secmem-warning --out=- -
autocmd BufReadPost,FileReadPost	*.gpg set nobin
autocmd BufReadPost,FileReadPost	*.gpg let &ch = ch_save|unlet ch_save
autocmd BufReadPost,FileReadPost	*.gpg execute ":doautocmd BufReadPost " . expand("%:r")

autocmd BufWritePre,FileWritePre	*.gpg set bin|'[,']!gpg -c --no-secmem-warning --out=- -
autocmd BufWritePre,FileWritePre	*.gpg !mv <afile> <afile>:r.bak
autocmd BufWritePost,FileWritePost	*.gpg !chmod 600 <afile>
autocmd BufWritePost,FileWritePost	*.gpg undo|set nobin

"  autocmd FileAppendPre			*.gpg !gunzip <afile>
"  autocmd FileAppendPre			*.gpg !mv <afile>:r <afile>
"  autocmd FileAppendPost		*.gpg !mv <afile> <afile>:r
"  autocmd FileAppendPost		*.gpg !gzip <afile>:r
augroup END

set nocompatible          " We're running Vim, not Vi!
syntax on                 " Enable syntax highlighting
syn sync fromstart
filetype plugin indent on " Enable filetype-specific indenting and plugins

" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim

augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml set ai sw=2 sts=2 et
augroup END

" Additional colour...
set background=dark
hi Comment term=NONE ctermfg=DarkCyan
" Highlight constant in colour
highlight constant ctermfg=DarkGreen

" Highlight a column in csv text.
" :Csv 1    " highlight first column
" :Csv 12   " highlight twelfth column
" :Csv 0    " switch off highlight
function! CSVH(colnr)
  if a:colnr > 1
    let n = a:colnr - 1
    execute 'match Keyword /^\([^,]*,\)\{'.n.'}\zs[^,]*/'
    execute 'normal! 0'.n.'f,'
  elseif a:colnr == 1
    match Keyword /^[^,]*/
    normal! 0
  else
    match
  endif
endfunction
command! -nargs=1 Csv :call CSVH(<args>)

