#
# Usage e.g.:
# perl -d -e '$DB::single=1; $a'
# Or:
# perl -d:hdb -e '$DB::single=1; $a'
#
# Then inside the debugger:
# DB<1> dp { Foo => 'Bar'}
#

my $skip;
BEGIN { $skip = '^(?:Moose|Eval::Closure|Class::MOP)' }
print STDERR <<"END";

Debugger skipping: /$skip/

See ~/.perldb if you don't like this behavior.

END

use DB::Skip pkgs => [ qr/$skip/ ];

use DB::Color;

$DB::alias{dp} = 's/dp/DB::dp/';
sub DB::dp {
    eval {
        require Data::Printer;
        Data::Printer->import(colored=>1,use_prototypes=>0);
    };
    if ($@=~/Can't locate/) {
        print 'Data::Printer is not installed';
        return;
    };
    print Data::Printer::p(@_);
}

# increase the limit for recursion from default 100
$DB::deep=1000 ;

# always "view" where I am in the code 
sub DB::afterinit { 
    no warnings 'once';

    # give me a window of lines instead of a single like
    push @DB::typeahead, "{{v" 
        unless $DB::already_curly_curly_v++;
}

# Depth of variable to 2
# NonStop=1 is to save us from having to type 'c' after every break point
# parse_options('dumpDepth=2 NonStop=1') ;

